// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/21/2024 01:53:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SAD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SAD_vlg_sample_tst(
	clk,
	go,
	reset,
	sampler_tx
);
input  clk;
input  go;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or go or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SAD_vlg_check_tst (
	AB_addr_watch,
	debug,
	sad,
	sampler_rx
);
input [8:0] AB_addr_watch;
input [2:0] debug;
input [31:0] sad;
input sampler_rx;

reg [8:0] AB_addr_watch_expected;
reg [2:0] debug_expected;
reg [31:0] sad_expected;

reg [8:0] AB_addr_watch_prev;
reg [2:0] debug_prev;
reg [31:0] sad_prev;

reg [8:0] AB_addr_watch_expected_prev;
reg [2:0] debug_expected_prev;
reg [31:0] sad_expected_prev;

reg [8:0] last_AB_addr_watch_exp;
reg [2:0] last_debug_exp;
reg [31:0] last_sad_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	AB_addr_watch_prev = AB_addr_watch;
	debug_prev = debug;
	sad_prev = sad;
end

// update expected /o prevs

always @(trigger)
begin
	AB_addr_watch_expected_prev = AB_addr_watch_expected;
	debug_expected_prev = debug_expected;
	sad_expected_prev = sad_expected;
end


// expected debug[ 2 ]
initial
begin
	debug_expected[2] = 1'bX;
end 
// expected debug[ 1 ]
initial
begin
	debug_expected[1] = 1'bX;
end 
// expected debug[ 0 ]
initial
begin
	debug_expected[0] = 1'bX;
end 
// expected sad[ 31 ]
initial
begin
	sad_expected[31] = 1'bX;
end 
// expected sad[ 30 ]
initial
begin
	sad_expected[30] = 1'bX;
end 
// expected sad[ 29 ]
initial
begin
	sad_expected[29] = 1'bX;
end 
// expected sad[ 28 ]
initial
begin
	sad_expected[28] = 1'bX;
end 
// expected sad[ 27 ]
initial
begin
	sad_expected[27] = 1'bX;
end 
// expected sad[ 26 ]
initial
begin
	sad_expected[26] = 1'bX;
end 
// expected sad[ 25 ]
initial
begin
	sad_expected[25] = 1'bX;
end 
// expected sad[ 24 ]
initial
begin
	sad_expected[24] = 1'bX;
end 
// expected sad[ 23 ]
initial
begin
	sad_expected[23] = 1'bX;
end 
// expected sad[ 22 ]
initial
begin
	sad_expected[22] = 1'bX;
end 
// expected sad[ 21 ]
initial
begin
	sad_expected[21] = 1'bX;
end 
// expected sad[ 20 ]
initial
begin
	sad_expected[20] = 1'bX;
end 
// expected sad[ 19 ]
initial
begin
	sad_expected[19] = 1'bX;
end 
// expected sad[ 18 ]
initial
begin
	sad_expected[18] = 1'bX;
end 
// expected sad[ 17 ]
initial
begin
	sad_expected[17] = 1'bX;
end 
// expected sad[ 16 ]
initial
begin
	sad_expected[16] = 1'bX;
end 
// expected sad[ 15 ]
initial
begin
	sad_expected[15] = 1'bX;
end 
// expected sad[ 14 ]
initial
begin
	sad_expected[14] = 1'bX;
end 
// expected sad[ 13 ]
initial
begin
	sad_expected[13] = 1'bX;
end 
// expected sad[ 12 ]
initial
begin
	sad_expected[12] = 1'bX;
end 
// expected sad[ 11 ]
initial
begin
	sad_expected[11] = 1'bX;
end 
// expected sad[ 10 ]
initial
begin
	sad_expected[10] = 1'bX;
end 
// expected sad[ 9 ]
initial
begin
	sad_expected[9] = 1'bX;
end 
// expected sad[ 8 ]
initial
begin
	sad_expected[8] = 1'bX;
end 
// expected sad[ 7 ]
initial
begin
	sad_expected[7] = 1'bX;
end 
// expected sad[ 6 ]
initial
begin
	sad_expected[6] = 1'bX;
end 
// expected sad[ 5 ]
initial
begin
	sad_expected[5] = 1'bX;
end 
// expected sad[ 4 ]
initial
begin
	sad_expected[4] = 1'bX;
end 
// expected sad[ 3 ]
initial
begin
	sad_expected[3] = 1'bX;
end 
// expected sad[ 2 ]
initial
begin
	sad_expected[2] = 1'bX;
end 
// expected sad[ 1 ]
initial
begin
	sad_expected[1] = 1'bX;
end 
// expected sad[ 0 ]
initial
begin
	sad_expected[0] = 1'bX;
end 
// expected AB_addr_watch[ 8 ]
initial
begin
	AB_addr_watch_expected[8] = 1'bX;
end 
// expected AB_addr_watch[ 7 ]
initial
begin
	AB_addr_watch_expected[7] = 1'bX;
end 
// expected AB_addr_watch[ 6 ]
initial
begin
	AB_addr_watch_expected[6] = 1'bX;
end 
// expected AB_addr_watch[ 5 ]
initial
begin
	AB_addr_watch_expected[5] = 1'bX;
end 
// expected AB_addr_watch[ 4 ]
initial
begin
	AB_addr_watch_expected[4] = 1'bX;
end 
// expected AB_addr_watch[ 3 ]
initial
begin
	AB_addr_watch_expected[3] = 1'bX;
end 
// expected AB_addr_watch[ 2 ]
initial
begin
	AB_addr_watch_expected[2] = 1'bX;
end 
// expected AB_addr_watch[ 1 ]
initial
begin
	AB_addr_watch_expected[1] = 1'bX;
end 
// expected AB_addr_watch[ 0 ]
initial
begin
	AB_addr_watch_expected[0] = 1'bX;
end 
// generate trigger
always @(AB_addr_watch_expected or AB_addr_watch or debug_expected or debug or sad_expected or sad)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AB_addr_watch = %b | expected debug = %b | expected sad = %b | ",AB_addr_watch_expected_prev,debug_expected_prev,sad_expected_prev);
	$display("| real AB_addr_watch = %b | real debug = %b | real sad = %b | ",AB_addr_watch_prev,debug_prev,sad_prev);
`endif
	if (
		( AB_addr_watch_expected_prev[0] !== 1'bx ) && ( AB_addr_watch_prev[0] !== AB_addr_watch_expected_prev[0] )
		&& ((AB_addr_watch_expected_prev[0] !== last_AB_addr_watch_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB_addr_watch[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB_addr_watch_expected_prev);
		$display ("     Real value = %b", AB_addr_watch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AB_addr_watch_exp[0] = AB_addr_watch_expected_prev[0];
	end
	if (
		( AB_addr_watch_expected_prev[1] !== 1'bx ) && ( AB_addr_watch_prev[1] !== AB_addr_watch_expected_prev[1] )
		&& ((AB_addr_watch_expected_prev[1] !== last_AB_addr_watch_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB_addr_watch[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB_addr_watch_expected_prev);
		$display ("     Real value = %b", AB_addr_watch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AB_addr_watch_exp[1] = AB_addr_watch_expected_prev[1];
	end
	if (
		( AB_addr_watch_expected_prev[2] !== 1'bx ) && ( AB_addr_watch_prev[2] !== AB_addr_watch_expected_prev[2] )
		&& ((AB_addr_watch_expected_prev[2] !== last_AB_addr_watch_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB_addr_watch[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB_addr_watch_expected_prev);
		$display ("     Real value = %b", AB_addr_watch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AB_addr_watch_exp[2] = AB_addr_watch_expected_prev[2];
	end
	if (
		( AB_addr_watch_expected_prev[3] !== 1'bx ) && ( AB_addr_watch_prev[3] !== AB_addr_watch_expected_prev[3] )
		&& ((AB_addr_watch_expected_prev[3] !== last_AB_addr_watch_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB_addr_watch[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB_addr_watch_expected_prev);
		$display ("     Real value = %b", AB_addr_watch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AB_addr_watch_exp[3] = AB_addr_watch_expected_prev[3];
	end
	if (
		( AB_addr_watch_expected_prev[4] !== 1'bx ) && ( AB_addr_watch_prev[4] !== AB_addr_watch_expected_prev[4] )
		&& ((AB_addr_watch_expected_prev[4] !== last_AB_addr_watch_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB_addr_watch[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB_addr_watch_expected_prev);
		$display ("     Real value = %b", AB_addr_watch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AB_addr_watch_exp[4] = AB_addr_watch_expected_prev[4];
	end
	if (
		( AB_addr_watch_expected_prev[5] !== 1'bx ) && ( AB_addr_watch_prev[5] !== AB_addr_watch_expected_prev[5] )
		&& ((AB_addr_watch_expected_prev[5] !== last_AB_addr_watch_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB_addr_watch[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB_addr_watch_expected_prev);
		$display ("     Real value = %b", AB_addr_watch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AB_addr_watch_exp[5] = AB_addr_watch_expected_prev[5];
	end
	if (
		( AB_addr_watch_expected_prev[6] !== 1'bx ) && ( AB_addr_watch_prev[6] !== AB_addr_watch_expected_prev[6] )
		&& ((AB_addr_watch_expected_prev[6] !== last_AB_addr_watch_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB_addr_watch[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB_addr_watch_expected_prev);
		$display ("     Real value = %b", AB_addr_watch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AB_addr_watch_exp[6] = AB_addr_watch_expected_prev[6];
	end
	if (
		( AB_addr_watch_expected_prev[7] !== 1'bx ) && ( AB_addr_watch_prev[7] !== AB_addr_watch_expected_prev[7] )
		&& ((AB_addr_watch_expected_prev[7] !== last_AB_addr_watch_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB_addr_watch[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB_addr_watch_expected_prev);
		$display ("     Real value = %b", AB_addr_watch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AB_addr_watch_exp[7] = AB_addr_watch_expected_prev[7];
	end
	if (
		( AB_addr_watch_expected_prev[8] !== 1'bx ) && ( AB_addr_watch_prev[8] !== AB_addr_watch_expected_prev[8] )
		&& ((AB_addr_watch_expected_prev[8] !== last_AB_addr_watch_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AB_addr_watch[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AB_addr_watch_expected_prev);
		$display ("     Real value = %b", AB_addr_watch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AB_addr_watch_exp[8] = AB_addr_watch_expected_prev[8];
	end
	if (
		( debug_expected_prev[0] !== 1'bx ) && ( debug_prev[0] !== debug_expected_prev[0] )
		&& ((debug_expected_prev[0] !== last_debug_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[0] = debug_expected_prev[0];
	end
	if (
		( debug_expected_prev[1] !== 1'bx ) && ( debug_prev[1] !== debug_expected_prev[1] )
		&& ((debug_expected_prev[1] !== last_debug_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[1] = debug_expected_prev[1];
	end
	if (
		( debug_expected_prev[2] !== 1'bx ) && ( debug_prev[2] !== debug_expected_prev[2] )
		&& ((debug_expected_prev[2] !== last_debug_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[2] = debug_expected_prev[2];
	end
	if (
		( sad_expected_prev[0] !== 1'bx ) && ( sad_prev[0] !== sad_expected_prev[0] )
		&& ((sad_expected_prev[0] !== last_sad_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[0] = sad_expected_prev[0];
	end
	if (
		( sad_expected_prev[1] !== 1'bx ) && ( sad_prev[1] !== sad_expected_prev[1] )
		&& ((sad_expected_prev[1] !== last_sad_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[1] = sad_expected_prev[1];
	end
	if (
		( sad_expected_prev[2] !== 1'bx ) && ( sad_prev[2] !== sad_expected_prev[2] )
		&& ((sad_expected_prev[2] !== last_sad_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[2] = sad_expected_prev[2];
	end
	if (
		( sad_expected_prev[3] !== 1'bx ) && ( sad_prev[3] !== sad_expected_prev[3] )
		&& ((sad_expected_prev[3] !== last_sad_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[3] = sad_expected_prev[3];
	end
	if (
		( sad_expected_prev[4] !== 1'bx ) && ( sad_prev[4] !== sad_expected_prev[4] )
		&& ((sad_expected_prev[4] !== last_sad_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[4] = sad_expected_prev[4];
	end
	if (
		( sad_expected_prev[5] !== 1'bx ) && ( sad_prev[5] !== sad_expected_prev[5] )
		&& ((sad_expected_prev[5] !== last_sad_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[5] = sad_expected_prev[5];
	end
	if (
		( sad_expected_prev[6] !== 1'bx ) && ( sad_prev[6] !== sad_expected_prev[6] )
		&& ((sad_expected_prev[6] !== last_sad_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[6] = sad_expected_prev[6];
	end
	if (
		( sad_expected_prev[7] !== 1'bx ) && ( sad_prev[7] !== sad_expected_prev[7] )
		&& ((sad_expected_prev[7] !== last_sad_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[7] = sad_expected_prev[7];
	end
	if (
		( sad_expected_prev[8] !== 1'bx ) && ( sad_prev[8] !== sad_expected_prev[8] )
		&& ((sad_expected_prev[8] !== last_sad_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[8] = sad_expected_prev[8];
	end
	if (
		( sad_expected_prev[9] !== 1'bx ) && ( sad_prev[9] !== sad_expected_prev[9] )
		&& ((sad_expected_prev[9] !== last_sad_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[9] = sad_expected_prev[9];
	end
	if (
		( sad_expected_prev[10] !== 1'bx ) && ( sad_prev[10] !== sad_expected_prev[10] )
		&& ((sad_expected_prev[10] !== last_sad_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[10] = sad_expected_prev[10];
	end
	if (
		( sad_expected_prev[11] !== 1'bx ) && ( sad_prev[11] !== sad_expected_prev[11] )
		&& ((sad_expected_prev[11] !== last_sad_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[11] = sad_expected_prev[11];
	end
	if (
		( sad_expected_prev[12] !== 1'bx ) && ( sad_prev[12] !== sad_expected_prev[12] )
		&& ((sad_expected_prev[12] !== last_sad_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[12] = sad_expected_prev[12];
	end
	if (
		( sad_expected_prev[13] !== 1'bx ) && ( sad_prev[13] !== sad_expected_prev[13] )
		&& ((sad_expected_prev[13] !== last_sad_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[13] = sad_expected_prev[13];
	end
	if (
		( sad_expected_prev[14] !== 1'bx ) && ( sad_prev[14] !== sad_expected_prev[14] )
		&& ((sad_expected_prev[14] !== last_sad_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[14] = sad_expected_prev[14];
	end
	if (
		( sad_expected_prev[15] !== 1'bx ) && ( sad_prev[15] !== sad_expected_prev[15] )
		&& ((sad_expected_prev[15] !== last_sad_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[15] = sad_expected_prev[15];
	end
	if (
		( sad_expected_prev[16] !== 1'bx ) && ( sad_prev[16] !== sad_expected_prev[16] )
		&& ((sad_expected_prev[16] !== last_sad_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[16] = sad_expected_prev[16];
	end
	if (
		( sad_expected_prev[17] !== 1'bx ) && ( sad_prev[17] !== sad_expected_prev[17] )
		&& ((sad_expected_prev[17] !== last_sad_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[17] = sad_expected_prev[17];
	end
	if (
		( sad_expected_prev[18] !== 1'bx ) && ( sad_prev[18] !== sad_expected_prev[18] )
		&& ((sad_expected_prev[18] !== last_sad_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[18] = sad_expected_prev[18];
	end
	if (
		( sad_expected_prev[19] !== 1'bx ) && ( sad_prev[19] !== sad_expected_prev[19] )
		&& ((sad_expected_prev[19] !== last_sad_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[19] = sad_expected_prev[19];
	end
	if (
		( sad_expected_prev[20] !== 1'bx ) && ( sad_prev[20] !== sad_expected_prev[20] )
		&& ((sad_expected_prev[20] !== last_sad_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[20] = sad_expected_prev[20];
	end
	if (
		( sad_expected_prev[21] !== 1'bx ) && ( sad_prev[21] !== sad_expected_prev[21] )
		&& ((sad_expected_prev[21] !== last_sad_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[21] = sad_expected_prev[21];
	end
	if (
		( sad_expected_prev[22] !== 1'bx ) && ( sad_prev[22] !== sad_expected_prev[22] )
		&& ((sad_expected_prev[22] !== last_sad_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[22] = sad_expected_prev[22];
	end
	if (
		( sad_expected_prev[23] !== 1'bx ) && ( sad_prev[23] !== sad_expected_prev[23] )
		&& ((sad_expected_prev[23] !== last_sad_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[23] = sad_expected_prev[23];
	end
	if (
		( sad_expected_prev[24] !== 1'bx ) && ( sad_prev[24] !== sad_expected_prev[24] )
		&& ((sad_expected_prev[24] !== last_sad_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[24] = sad_expected_prev[24];
	end
	if (
		( sad_expected_prev[25] !== 1'bx ) && ( sad_prev[25] !== sad_expected_prev[25] )
		&& ((sad_expected_prev[25] !== last_sad_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[25] = sad_expected_prev[25];
	end
	if (
		( sad_expected_prev[26] !== 1'bx ) && ( sad_prev[26] !== sad_expected_prev[26] )
		&& ((sad_expected_prev[26] !== last_sad_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[26] = sad_expected_prev[26];
	end
	if (
		( sad_expected_prev[27] !== 1'bx ) && ( sad_prev[27] !== sad_expected_prev[27] )
		&& ((sad_expected_prev[27] !== last_sad_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[27] = sad_expected_prev[27];
	end
	if (
		( sad_expected_prev[28] !== 1'bx ) && ( sad_prev[28] !== sad_expected_prev[28] )
		&& ((sad_expected_prev[28] !== last_sad_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[28] = sad_expected_prev[28];
	end
	if (
		( sad_expected_prev[29] !== 1'bx ) && ( sad_prev[29] !== sad_expected_prev[29] )
		&& ((sad_expected_prev[29] !== last_sad_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[29] = sad_expected_prev[29];
	end
	if (
		( sad_expected_prev[30] !== 1'bx ) && ( sad_prev[30] !== sad_expected_prev[30] )
		&& ((sad_expected_prev[30] !== last_sad_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[30] = sad_expected_prev[30];
	end
	if (
		( sad_expected_prev[31] !== 1'bx ) && ( sad_prev[31] !== sad_expected_prev[31] )
		&& ((sad_expected_prev[31] !== last_sad_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sad[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sad_expected_prev);
		$display ("     Real value = %b", sad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sad_exp[31] = sad_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#600000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SAD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg go;
reg reset;
// wires                                               
wire [8:0] AB_addr_watch;
wire [2:0] debug;
wire [31:0] sad;

wire sampler;                             

// assign statements (if any)                          
SAD i1 (
// port map - connection between master ports and signals/registers   
	.AB_addr_watch(AB_addr_watch),
	.clk(clk),
	.debug(debug),
	.go(go),
	.reset(reset),
	.sad(sad)
);

// reset
initial
begin
	reset = 1'b0;
	reset = #52000 1'b1;
	reset = #2000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// go
initial
begin
	go = 1'b0;
	go = #5000 1'b1;
	go = #2000 1'b0;
	go = #39000 1'b1;
	go = #2000 1'b0;
	go = #10000 1'b1;
	go = #2000 1'b0;
end 

SAD_vlg_sample_tst tb_sample (
	.clk(clk),
	.go(go),
	.reset(reset),
	.sampler_tx(sampler)
);

SAD_vlg_check_tst tb_out(
	.AB_addr_watch(AB_addr_watch),
	.debug(debug),
	.sad(sad),
	.sampler_rx(sampler)
);
endmodule

