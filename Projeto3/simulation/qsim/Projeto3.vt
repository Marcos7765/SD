// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/25/2024 21:46:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    BCD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BCD_vlg_sample_tst(
	num,
	sampler_tx
);
input [7:0] num;
output sampler_tx;

reg sample;
time current_time;
always @(num)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module BCD_vlg_check_tst (
	cent,
	dez,
	unid,
	sampler_rx
);
input [3:0] cent;
input [3:0] dez;
input [3:0] unid;
input sampler_rx;

reg [3:0] cent_expected;
reg [3:0] dez_expected;
reg [3:0] unid_expected;

reg [3:0] cent_prev;
reg [3:0] dez_prev;
reg [3:0] unid_prev;

reg [3:0] cent_expected_prev;
reg [3:0] dez_expected_prev;
reg [3:0] unid_expected_prev;

reg [3:0] last_cent_exp;
reg [3:0] last_dez_exp;
reg [3:0] last_unid_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	cent_prev = cent;
	dez_prev = dez;
	unid_prev = unid;
end

// update expected /o prevs

always @(trigger)
begin
	cent_expected_prev = cent_expected;
	dez_expected_prev = dez_expected;
	unid_expected_prev = unid_expected;
end


// expected cent[ 3 ]
initial
begin
	cent_expected[3] = 1'bX;
end 
// expected cent[ 2 ]
initial
begin
	cent_expected[2] = 1'bX;
end 
// expected cent[ 1 ]
initial
begin
	cent_expected[1] = 1'bX;
end 
// expected cent[ 0 ]
initial
begin
	cent_expected[0] = 1'bX;
end 
// expected dez[ 3 ]
initial
begin
	dez_expected[3] = 1'bX;
end 
// expected dez[ 2 ]
initial
begin
	dez_expected[2] = 1'bX;
end 
// expected dez[ 1 ]
initial
begin
	dez_expected[1] = 1'bX;
end 
// expected dez[ 0 ]
initial
begin
	dez_expected[0] = 1'bX;
end 
// expected unid[ 3 ]
initial
begin
	unid_expected[3] = 1'bX;
end 
// expected unid[ 2 ]
initial
begin
	unid_expected[2] = 1'bX;
end 
// expected unid[ 1 ]
initial
begin
	unid_expected[1] = 1'bX;
end 
// expected unid[ 0 ]
initial
begin
	unid_expected[0] = 1'bX;
end 
// generate trigger
always @(cent_expected or cent or dez_expected or dez or unid_expected or unid)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cent = %b | expected dez = %b | expected unid = %b | ",cent_expected_prev,dez_expected_prev,unid_expected_prev);
	$display("| real cent = %b | real dez = %b | real unid = %b | ",cent_prev,dez_prev,unid_prev);
`endif
	if (
		( cent_expected_prev[0] !== 1'bx ) && ( cent_prev[0] !== cent_expected_prev[0] )
		&& ((cent_expected_prev[0] !== last_cent_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cent[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cent_expected_prev);
		$display ("     Real value = %b", cent_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cent_exp[0] = cent_expected_prev[0];
	end
	if (
		( cent_expected_prev[1] !== 1'bx ) && ( cent_prev[1] !== cent_expected_prev[1] )
		&& ((cent_expected_prev[1] !== last_cent_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cent[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cent_expected_prev);
		$display ("     Real value = %b", cent_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cent_exp[1] = cent_expected_prev[1];
	end
	if (
		( cent_expected_prev[2] !== 1'bx ) && ( cent_prev[2] !== cent_expected_prev[2] )
		&& ((cent_expected_prev[2] !== last_cent_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cent[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cent_expected_prev);
		$display ("     Real value = %b", cent_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cent_exp[2] = cent_expected_prev[2];
	end
	if (
		( cent_expected_prev[3] !== 1'bx ) && ( cent_prev[3] !== cent_expected_prev[3] )
		&& ((cent_expected_prev[3] !== last_cent_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cent[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cent_expected_prev);
		$display ("     Real value = %b", cent_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cent_exp[3] = cent_expected_prev[3];
	end
	if (
		( dez_expected_prev[0] !== 1'bx ) && ( dez_prev[0] !== dez_expected_prev[0] )
		&& ((dez_expected_prev[0] !== last_dez_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dez[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dez_expected_prev);
		$display ("     Real value = %b", dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dez_exp[0] = dez_expected_prev[0];
	end
	if (
		( dez_expected_prev[1] !== 1'bx ) && ( dez_prev[1] !== dez_expected_prev[1] )
		&& ((dez_expected_prev[1] !== last_dez_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dez[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dez_expected_prev);
		$display ("     Real value = %b", dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dez_exp[1] = dez_expected_prev[1];
	end
	if (
		( dez_expected_prev[2] !== 1'bx ) && ( dez_prev[2] !== dez_expected_prev[2] )
		&& ((dez_expected_prev[2] !== last_dez_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dez[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dez_expected_prev);
		$display ("     Real value = %b", dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dez_exp[2] = dez_expected_prev[2];
	end
	if (
		( dez_expected_prev[3] !== 1'bx ) && ( dez_prev[3] !== dez_expected_prev[3] )
		&& ((dez_expected_prev[3] !== last_dez_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dez[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dez_expected_prev);
		$display ("     Real value = %b", dez_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dez_exp[3] = dez_expected_prev[3];
	end
	if (
		( unid_expected_prev[0] !== 1'bx ) && ( unid_prev[0] !== unid_expected_prev[0] )
		&& ((unid_expected_prev[0] !== last_unid_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port unid[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", unid_expected_prev);
		$display ("     Real value = %b", unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_unid_exp[0] = unid_expected_prev[0];
	end
	if (
		( unid_expected_prev[1] !== 1'bx ) && ( unid_prev[1] !== unid_expected_prev[1] )
		&& ((unid_expected_prev[1] !== last_unid_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port unid[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", unid_expected_prev);
		$display ("     Real value = %b", unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_unid_exp[1] = unid_expected_prev[1];
	end
	if (
		( unid_expected_prev[2] !== 1'bx ) && ( unid_prev[2] !== unid_expected_prev[2] )
		&& ((unid_expected_prev[2] !== last_unid_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port unid[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", unid_expected_prev);
		$display ("     Real value = %b", unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_unid_exp[2] = unid_expected_prev[2];
	end
	if (
		( unid_expected_prev[3] !== 1'bx ) && ( unid_prev[3] !== unid_expected_prev[3] )
		&& ((unid_expected_prev[3] !== last_unid_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port unid[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", unid_expected_prev);
		$display ("     Real value = %b", unid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_unid_exp[3] = unid_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module BCD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] num;
// wires                                               
wire [3:0] cent;
wire [3:0] dez;
wire [3:0] unid;

wire sampler;                             

// assign statements (if any)                          
BCD i1 (
// port map - connection between master ports and signals/registers   
	.cent(cent),
	.dez(dez),
	.num(num),
	.unid(unid)
);
// num[ 7 ]
initial
begin
	num[7] = 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #10000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #12000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #8000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #14000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #10000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #10000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #12000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #14000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #14000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #10000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #8000 1'b0;
	num[7] = #18000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #10000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #10000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #8000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #8000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #10000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #10000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #8000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #10000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #12000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #10000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #8000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #6000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #4000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #12000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #10000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #4000 1'b1;
	num[7] = #8000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #6000 1'b1;
	num[7] = #2000 1'b0;
	num[7] = #2000 1'b1;
	num[7] = #2000 1'b0;
end 
// num[ 6 ]
initial
begin
	num[6] = 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #8000 1'b0;
	num[6] = #12000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #6000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #14000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #16000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #8000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #8000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #6000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #8000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #6000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #6000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #10000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #8000 1'b0;
	num[6] = #10000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #6000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #8000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #6000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #8000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #10000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #8000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #12000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #8000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #6000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #8000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #6000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #10000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #6000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #8000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #12000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #16000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #6000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #8000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #8000 1'b1;
	num[6] = #6000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #6000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #6000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #8000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #4000 1'b0;
	num[6] = #8000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #2000 1'b1;
	num[6] = #2000 1'b0;
	num[6] = #4000 1'b1;
	num[6] = #6000 1'b0;
end 
// num[ 5 ]
initial
begin
	num[5] = 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #14000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #10000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #8000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #12000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #10000 1'b0;
	num[5] = #8000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #10000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #10000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #8000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #8000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #12000 1'b1;
	num[5] = #16000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #8000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #8000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #12000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #8000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #10000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #10000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #12000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #8000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #8000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #8000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #8000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #12000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #6000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #4000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #4000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #2000 1'b1;
	num[5] = #6000 1'b0;
	num[5] = #8000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #12000 1'b1;
	num[5] = #2000 1'b0;
	num[5] = #6000 1'b1;
end 
// num[ 4 ]
initial
begin
	num[4] = 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #14000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #6000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #6000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #16000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #6000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #10000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #6000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #6000 1'b0;
	num[4] = #6000 1'b1;
	num[4] = #12000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #8000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #8000 1'b0;
	num[4] = #6000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #6000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #8000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #14000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #6000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #6000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #18000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #6000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #16000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #14000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #16000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #10000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #6000 1'b0;
	num[4] = #12000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #8000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #6000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #6000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #18000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #8000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #10000 1'b0;
	num[4] = #10000 1'b1;
	num[4] = #6000 1'b0;
	num[4] = #14000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #10000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #10000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #18000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #12000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #6000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #10000 1'b1;
	num[4] = #6000 1'b0;
	num[4] = #6000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #6000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #8000 1'b1;
	num[4] = #8000 1'b0;
	num[4] = #10000 1'b1;
	num[4] = #6000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #8000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #8000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #8000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #6000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #14000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #6000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #2000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #8000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #2000 1'b0;
	num[4] = #6000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #4000 1'b0;
	num[4] = #4000 1'b1;
	num[4] = #10000 1'b0;
end 
// num[ 3 ]
initial
begin
	num[3] = 1'b0;
	num[3] = #6000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #14000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #6000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #6000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #14000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #8000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #12000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #10000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #8000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #8000 1'b1;
	num[3] = #12000 1'b0;
	num[3] = #6000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #6000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #8000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #8000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #10000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #12000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #16000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #12000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #14000 1'b0;
	num[3] = #8000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #8000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #18000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #6000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #6000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #6000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #8000 1'b1;
	num[3] = #10000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #6000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #8000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #6000 1'b0;
	num[3] = #6000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #8000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #8000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #10000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #12000 1'b0;
	num[3] = #6000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #2000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #6000 1'b1;
	num[3] = #4000 1'b0;
	num[3] = #4000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #10000 1'b1;
	num[3] = #2000 1'b0;
	num[3] = #2000 1'b1;
end 
// num[ 2 ]
initial
begin
	num[2] = 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #8000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #14000 1'b0;
	num[2] = #6000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #10000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #10000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #14000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #6000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #12000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #8000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #8000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #6000 1'b1;
	num[2] = #8000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #6000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #14000 1'b1;
	num[2] = #12000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #8000 1'b1;
	num[2] = #12000 1'b0;
	num[2] = #6000 1'b1;
	num[2] = #8000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #6000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #8000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #8000 1'b0;
	num[2] = #6000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #10000 1'b1;
	num[2] = #14000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #12000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #18000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #6000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #12000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #6000 1'b1;
	num[2] = #10000 1'b0;
	num[2] = #6000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #6000 1'b1;
	num[2] = #8000 1'b0;
	num[2] = #6000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #6000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #6000 1'b1;
	num[2] = #22000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #10000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #8000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #8000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #6000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #4000 1'b1;
	num[2] = #2000 1'b0;
	num[2] = #6000 1'b1;
	num[2] = #4000 1'b0;
	num[2] = #2000 1'b1;
end 
// num[ 1 ]
initial
begin
	num[1] = 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #14000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #10000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #8000 1'b1;
	num[1] = #6000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #8000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #6000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #8000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #8000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #8000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #8000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #10000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #6000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #8000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #12000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #8000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #6000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #8000 1'b0;
	num[1] = #12000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #6000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #8000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #6000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #6000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #8000 1'b0;
	num[1] = #12000 1'b1;
	num[1] = #10000 1'b0;
	num[1] = #8000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #6000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #6000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #10000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #14000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #10000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #12000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #12000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #6000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #8000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #6000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #8000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #10000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #10000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #4000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #6000 1'b1;
	num[1] = #4000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #6000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #2000 1'b0;
	num[1] = #2000 1'b1;
	num[1] = #4000 1'b0;
end 
// num[ 0 ]
initial
begin
	num[0] = 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #6000 1'b0;
	num[0] = #8000 1'b1;
	num[0] = #8000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #6000 1'b0;
	num[0] = #6000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #6000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #6000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #6000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #10000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #6000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #12000 1'b0;
	num[0] = #8000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #10000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #6000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #6000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #10000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #12000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #6000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #14000 1'b1;
	num[0] = #6000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #8000 1'b0;
	num[0] = #10000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #8000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #6000 1'b1;
	num[0] = #6000 1'b0;
	num[0] = #12000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #6000 1'b1;
	num[0] = #6000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #10000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #14000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #8000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #8000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #8000 1'b1;
	num[0] = #10000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #8000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #10000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #6000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #10000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #6000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #8000 1'b1;
	num[0] = #6000 1'b0;
	num[0] = #8000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #6000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #6000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #6000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #8000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #8000 1'b1;
	num[0] = #6000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #10000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #8000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #6000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #12000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #12000 1'b0;
	num[0] = #6000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #6000 1'b1;
	num[0] = #10000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #8000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #12000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #18000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #4000 1'b0;
	num[0] = #4000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #2000 1'b1;
	num[0] = #8000 1'b0;
	num[0] = #6000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #10000 1'b1;
	num[0] = #2000 1'b0;
	num[0] = #6000 1'b1;
end 

BCD_vlg_sample_tst tb_sample (
	.num(num),
	.sampler_tx(sampler)
);

BCD_vlg_check_tst tb_out(
	.cent(cent),
	.dez(dez),
	.unid(unid),
	.sampler_rx(sampler)
);
endmodule

